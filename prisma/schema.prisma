// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Type {
  LEADGUITAR
  RYTHMGUITAR
  ACOUSTICGUITAR
  DRUMS
  BASS
  VOCALS
  KEYBOARD
}

enum Level {
  BEGINNER
  INTERMEDIATE
  PROFESSIONAL
}

model User {
  id               String       @id @default(cuid())
  name             String?
  email            String?      @unique
  emailVerified    DateTime?
  image            String?
  displayName      String?
  age              Int?
  bio              String?
  lookingForBand   Boolean?     @default(false)
  accounts         Account[]
  sessions         Session[]
  portraits        Portrait[]
  instruments      Instrument[]
  tracks           Track[]
  commentsReceived Comment[]    @relation(name: "UserCommentsReceived")
  commentsGiven    Comment[]    @relation(name: "UserCommentsGiven")
  messagesReceived Message[]    @relation(name: "UserMessageReceived")
  messagesGiven    Message[]    @relation(name: "UserMessageGiven")
  likesReceived    Like[]       @relation(name: "UserLikesReceived")
  likesGiven       Like[]       @relation(name: "UserLikesGiven")
}

model Portrait {
  id     Int     @id @default(autoincrement())
  file   String
  user   User?   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String?
}

model Instrument {
  id     Int     @id @default(autoincrement())
  type   Type    @default(VOCALS)
  level  Level   @default(BEGINNER)
  user   User?   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String?
}

model Track {
  id     Int     @id @default(autoincrement())
  name   String
  file   String
  user   User?   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String?
}

model Comment {
  id       Int     @id @default(autoincrement())
  content  String
  target   User?   @relation(name: "UserCommentsReceived", fields: [targetId], references: [id], onDelete: Cascade)
  targetId String?
  owner    User?   @relation(name: "UserCommentsGiven", fields: [ownerId], references: [id], onDelete: Cascade)
  ownerId  String?
}

model Message {
  id       Int     @id @default(autoincrement())
  content  String
  target   User?   @relation(name: "UserMessageReceived", fields: [targetId], references: [id], onDelete: Cascade)
  targetId String?
  owner    User?   @relation(name: "UserMessageGiven", fields: [ownerId], references: [id], onDelete: Cascade)
  ownerId  String?
}

model Like {
  id       Int     @id @default(autoincrement())
  target   User?   @relation(name: "UserLikesReceived", fields: [targetId], references: [id], onDelete: Cascade)
  targetId String?
  owner    User?   @relation(name: "UserLikesGiven", fields: [ownerId], references: [id], onDelete: Cascade)
  ownerId  String?

  @@unique([ownerId, targetId])
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
